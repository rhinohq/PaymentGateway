@page "/basket"
@using Microsoft.AspNetCore.Authorization

@using PaymentGateway.Data.ViewModels

@inject HttpClient Http
@inject NavigationManager NavManager
@attribute [Authorize]

<div>
    <div style="float: right;">
        <button class="btn" @onclick="GoToCheckout" disabled="@(UserBasket == null || UserBasket.Size == 0)">
            <span class="oi oi-cart" aria-hidden="true"></span> Checkout
        </button>
    </div>

    <h3>Basket @TitleAddendum</h3>
</div>

<br />

@if (UserBasket != null)
{
    <EditForm EditContext="@EditContext">
        <section class="products">
            @foreach (var item in UserBasket.Items)
            {
                <ProductMeta Prod="item.Product"></ProductMeta>

                <div>
                    <InputNumber @bind-Value="item.Quantity" @onchange="UpdateBasket" min="0"></InputNumber>
                </div>
            }
        </section>
    </EditForm>

    <hr />

    <div style="float: right;">
        <p><b>Total:</b> @TotalCost</p>
    </div>
}
else
{
    <p>Loading your basket...</p>
}

@code {
    private EditContext EditContext;
    private BasketDetail UserBasket { get; set; }

    private string TitleAddendum => UserBasket != null
        ? $"- {UserBasket.Size} Items"
        : string.Empty;

    private string TotalCost => UserBasket != null
        ? $"£{UserBasket.TotalCost}"
        : "£0.00";

    protected override async Task OnInitializedAsync()
    {
        UserBasket = await Http.GetFromJsonAsync<BasketDetail>("Basket");

        EditContext = new EditContext(UserBasket);
        EditContext.OnFieldChanged += async (s, e) => await EditContext_OnFieldChanged(s, e);
    }

    private async Task UpdateBasket()
    {
        var response = await Http.PutAsJsonAsync("Basket/Update", UserBasket);
    }

    private void GoToCheckout()
    {
        NavManager.NavigateTo("/checkout");
    }

    private async Task EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        await UpdateBasket();
    }
}
